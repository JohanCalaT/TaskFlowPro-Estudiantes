@using TaskFlowPro.Web.Services
@using TaskFlowPro.Web.Components.UI
@inject IUIStateService UIState
@namespace TaskFlowPro.Web.Features.Teams.Components

<div class="space-y-6 animate-fadeInUp">
    <!-- Header Section -->
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div class="flex items-center gap-3 animate-slideInLeft">
            <div class="icon-container">
                <i class="fas fa-users-cog text-white"></i>
            </div>
            <div>
                <h1 class="page-title">Team Management</h1>
                <div class="flex items-center gap-2">
                    <p class="page-subtitle">Organize and manage your teams</p>
                    <i class="fas fa-sparkles w-3 h-3 text-accent animate-pulse"></i>
                </div>
            </div>
        </div>
        
        <Button Variant="Button.ButtonVariant.Primary"
                OnClick="HandleCreateTeam"
                Icon="fas fa-plus"
                class="create-button">
            Create Team
        </Button>
    </div>

    <!-- Teams Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        @foreach (var (team, index) in teams.Select((t, i) => (t, i)))
        {
            <Card HasShadow="true"
                  IsAnimated="true"
                  CustomClass="hover:shadow-xl transition-all duration-300 hover:scale-[1.02]">
                <ChildContent>
                    <div class="space-y-4">
                        <div class="flex items-start justify-between">
                            <div class="flex items-center gap-3">
                                <div class="w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center">
                                    <i class="fas fa-users text-white"></i>
                                </div>
                                <div>
                                    <h3 class="font-semibold text-lg">@team.Name</h3>
                                    <p class="text-sm text-muted-foreground">@team.MemberCount members</p>
                                </div>
                            </div>
                            
                            <div class="flex gap-1">
                                <Button Variant="Button.ButtonVariant.Ghost"
                                        Size="Button.ButtonSize.Small"
                                        OnClick="() => HandleEditTeam(team.Id)"
                                        Icon="fas fa-edit"
                                        class="hover:bg-primary/10 hover:text-primary p-2" />
                                
                                <Button Variant="Button.ButtonVariant.Ghost"
                                        Size="Button.ButtonSize.Small"
                                        OnClick="() => HandleDeleteTeam(team.Id)"
                                        Icon="fas fa-trash"
                                        class="hover:bg-status-urgent/10 hover:text-status-urgent p-2" />
                            </div>
                        </div>
                        
                        <p class="text-sm text-muted-foreground">@team.Description</p>
                        
                        <div class="flex items-center justify-between pt-2 border-t">
                            <div class="flex items-center gap-2 text-sm text-muted-foreground">
                                <i class="fas fa-user-tie"></i>
                                <span>@GetTeamLeaderName(team.LeaderId)</span>
                            </div>
                            
                            <div class="text-xs text-muted-foreground">
                                Created @GetTimeAgo(team.CreatedAt)
                            </div>
                        </div>
                        
                        <div class="flex gap-2">
                            <Button Variant="Button.ButtonVariant.Ghost"
                                    Size="Button.ButtonSize.Small"
                                    OnClick="() => HandleViewTasks(team.Id)"
                                    Icon="fas fa-tasks"
                                    class="flex-1 hover:bg-primary/10 hover:text-primary">
                                View Tasks
                            </Button>
                            
                            <Button Variant="Button.ButtonVariant.Ghost"
                                    Size="Button.ButtonSize.Small"
                                    OnClick="() => HandleViewMembers(team.Id)"
                                    Icon="fas fa-users"
                                    class="flex-1 hover:bg-secondary/10 hover:text-secondary">
                                Members
                            </Button>
                        </div>
                    </div>
                </ChildContent>
            </Card>
        }
    </div>
    
    @if (!teams.Any())
    {
        <EmptyState Icon="fas fa-users-cog"
                  Title="No teams found"
                  Description="Create your first team to organize your workforce"
                  Size="EmptyState.EmptyStateSize.Large">
            <ChildContent>
                <div class="mt-6">
                    <Button Variant="Button.ButtonVariant.Primary"
                            OnClick="HandleCreateTeam"
                            Icon="fas fa-plus">
                        Create First Team
                    </Button>
                </div>
            </ChildContent>
        </EmptyState>
    }
</div>

@code {
    private List<MockTeam> teams = new();
    private List<MockUser> users = new();

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        teams = MockDataService.GetMockTeams();
        users = MockDataService.GetMockUsers();
    }

    private string GetTeamLeaderName(string leaderId)
    {
        var leader = users.FirstOrDefault(u => u.Id == leaderId);
        return leader != null ? $"{leader.FirstName} {leader.LastName}" : "No leader assigned";
    }

    private string GetTimeAgo(DateTime createdAt)
    {
        var timeSpan = DateTime.Now - createdAt;
        
        if (timeSpan.TotalDays >= 30)
            return $"{(int)(timeSpan.TotalDays / 30)} months ago";
        if (timeSpan.TotalDays >= 1)
            return $"{(int)timeSpan.TotalDays} days ago";
        if (timeSpan.TotalHours >= 1)
            return $"{(int)timeSpan.TotalHours} hours ago";
        
        return "Today";
    }

    private void HandleCreateTeam()
    {
        UIState.NavigateTo("team-form");
    }

    private void HandleEditTeam(string teamId)
    {
        UIState.NavigateTo("team-form");
        UIState.ShowInfo($"Editing team: {teamId}");
    }

    private void HandleDeleteTeam(string teamId)
    {
        var team = teams.FirstOrDefault(t => t.Id == teamId);
        if (team != null)
        {
            teams.Remove(team);
            UIState.ShowSuccess($"Team {team.Name} deleted successfully");
            StateHasChanged();
        }
    }

    private void HandleViewTasks(string teamId)
    {
        UIState.NavigateTo("team-tasks");
        UIState.ShowInfo("Viewing team tasks");
    }

    private void HandleViewMembers(string teamId)
    {
        UIState.ShowInfo("Team members view - Feature coming soon!");
    }
}
